#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include "TimeTracker.h"
#include "Menu.h"
#include "Config.h"
#include "Pins.h"
#include "WebServerMenu.h"
#include <WebServer.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

const unsigned char epd_bitmap_Untitled[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x3f, 0xbf, 0xe3, 0xff, 0x80, 0x7d, 0xef, 0x80, 0x7c, 0x03, 0xe0, 0x3e, 0x01, 0xf8, 0x07,
    0xfe, 0x3f, 0x3e, 0x00, 0x3f, 0x00, 0x79, 0xc7, 0x00, 0x78, 0x03, 0xc0, 0x1c, 0x01, 0xf0, 0x07,
    0xe0, 0x06, 0x3c, 0x00, 0x1e, 0x00, 0x71, 0x87, 0x00, 0x70, 0x03, 0x80, 0x18, 0x01, 0xe0, 0x07,
    0xe0, 0x06, 0x3c, 0x00, 0x1e, 0x3c, 0x71, 0x87, 0x3c, 0x71, 0xe3, 0x8f, 0x18, 0xf1, 0xe3, 0xc7,
    0xf0, 0x02, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x0f, 0x3c, 0x71, 0xe3, 0x8f, 0x18, 0xf1, 0xe3, 0xc7,
    0xfc, 0x02, 0x38, 0xe3, 0x8e, 0x3c, 0xf0, 0x1f, 0x3c, 0xf1, 0xe7, 0x8f, 0x18, 0xf3, 0xe3, 0xc7,
    0xfe, 0x32, 0x38, 0xe3, 0x8e, 0x3d, 0xf0, 0x3f, 0x3d, 0xf1, 0xef, 0x8f, 0x18, 0xf7, 0xe3, 0xc7,
    0xfe, 0x32, 0x38, 0xe3, 0x8e, 0x3d, 0xf0, 0x3f, 0x3d, 0xf1, 0xef, 0x8f, 0x18, 0xf7, 0xe3, 0xc7,
    0xfe, 0x3a, 0x38, 0xe3, 0x8e, 0x3f, 0xf0, 0x3f, 0x3f, 0xf1, 0xff, 0x8f, 0x18, 0xff, 0xe3, 0xc7,
    0xfe, 0x3e, 0x38, 0xe3, 0x8c, 0x07, 0xe0, 0x7e, 0x07, 0xe0, 0x3f, 0x8f, 0x10, 0x1f, 0xc0, 0x0f,
    0xfe, 0x3e, 0x38, 0xe3, 0x88, 0x07, 0xc0, 0x7c, 0x07, 0xc0, 0x3e, 0x00, 0x30, 0x1f, 0x80, 0x1f,
    0xfe, 0x3e, 0x38, 0xe3, 0x88, 0x07, 0xc0, 0x7c, 0x07, 0xc0, 0x3e, 0x00, 0x30, 0x1f, 0x80, 0x1f,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3f, 0xf0, 0x3f, 0x3f, 0xf1, 0xff, 0x00, 0x78, 0xff, 0xe3, 0xff,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3d, 0xf0, 0x3f, 0x3d, 0xf1, 0xef, 0x8f, 0xf8, 0xf7, 0x80, 0x07,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0xf0, 0x1f, 0x3c, 0xf1, 0xe7, 0x8f, 0xf8, 0xf3, 0xc0, 0x07,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x0f, 0x3c, 0x71, 0xe3, 0x8f, 0xf8, 0xf1, 0xe3, 0xc7,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x0f, 0x3c, 0x71, 0xe3, 0x8f, 0xf8, 0xf1, 0xe3, 0xc7,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x87, 0x3c, 0x71, 0xe3, 0x8f, 0xf8, 0xf1, 0xe3, 0xc7,
    0xfe, 0x0e, 0x7c, 0xe3, 0x9e, 0x00, 0x71, 0xc7, 0x00, 0x70, 0x03, 0x83, 0xf8, 0x01, 0xe3, 0xc7,
    0xfc, 0x1e, 0xfe, 0xe3, 0xbe, 0x00, 0x71, 0xef, 0x00, 0x70, 0x03, 0x07, 0xf8, 0x01, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

const uint8_t BUTTON_PINS[] = {25, 26, 27, 14};
const int NUM_BUTTONS = 4;

bool buttonStates[NUM_BUTTONS] = {false};
bool lastButtonStates[NUM_BUTTONS] = {false};
unsigned long lastDebounceTime[NUM_BUTTONS] = {0};
unsigned long debounceDelay = 50;

unsigned long buttonPressStartTime[NUM_BUTTONS] = {0};
bool buttonWasPressed[NUM_BUTTONS] = {false};

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
TimeTracker timeTracker;
Menu menu(&display);
Config config;
WebServer server(80);
WebServerMenu webserver(&server);

void setup()
{
  Serial.begin(115200);

  for (int i = 0; i < NUM_BUTTONS; i++)
  {
    pinMode(BUTTON_PINS[i], INPUT_PULLUP);
  }

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  display.clearDisplay();
  display.display();

  display.drawBitmap(0, 0, epd_bitmap_Untitled, 128, 32, SSD1306_WHITE);

  display.setTextColor(SSD1306_WHITE);
  display.cp437(true);

  display.setTextSize(2);
  display.setCursor(0, 34);
  display.print("by Lachlan");

  display.setTextSize(1);
  display.setCursor(0, 52);
  display.print("v1.0.0 - 2025");
  display.display();

  delay(3000);

  config.load();

  for (int i = 0; i < 4; i++)
  {
    timeTracker.setActivityName(i, config.getActivityName(i));
  }

  if (config.hasWiFiCredentials())
  {
    Serial.println("SSID: " + String(config.getSSID()) + ", Password: " + String(config.getPassword()));
    WiFi.begin(config.getSSID(), config.getPassword());
    while (WiFi.status() != WL_CONNECTED)
    {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    webserver.begin();
  }
}

void checkMenuEntry()
{
  static unsigned long menuEntryTimer = 0;

  if (buttonStates[CONFIRM_BUTTON] && buttonStates[DOWN_BUTTON])
  {
    if (menuEntryTimer == 0)
    {
      menuEntryTimer = millis();
    }
    else if (millis() - menuEntryTimer > 3000)
    {
      menu.enter();
      menuEntryTimer = 0;
    }
  }
  else
  {
    menuEntryTimer = 0;
  }
}

void handleButtons()
{
  for (int i = 0; i < NUM_BUTTONS; i++)
  {
    int reading = !digitalRead(BUTTON_PINS[i]);

    if (reading != lastButtonStates[i])
    {
      lastDebounceTime[i] = millis();
    }

    if ((millis() - lastDebounceTime[i]) > debounceDelay)
    {
      if (reading != buttonStates[i])
      {
        buttonStates[i] = reading;

        Serial.print("Button ");
        Serial.print(i);
        Serial.print(" changed to: ");
        Serial.println(buttonStates[i] ? "PRESSED" : "RELEASED");

        if (buttonStates[i])
        {
          Serial.println("Sending button press event");

          if (menu.isActive())
            menu.handleButton(i, true);
        }
        else
        {
          Serial.println("Sending button release event");
          if (menu.isActive())
          {
            menu.handleButton(-1, false);
          }
          else
          {
            timeTracker.startStopActivity(i);
          }
        }
      }
    }
    lastButtonStates[i] = reading;
  }
}

void loop()
{

  webserver.update();

  handleButtons();

  if (!menu.isActive())
  {
    checkMenuEntry();
    timeTracker.update();
    timeTracker.display(&display);
  }
  else
  {
    menu.update();
    menu.displayMenu();
  }

  delay(10);
}