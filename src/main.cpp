#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include "TimeTracker.h"
#include "Menu.h"
#include "Config.h"
#include "Pins.h"

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

const unsigned char epd_bitmap_Untitled[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x3f, 0xbf, 0xe3, 0xff, 0x80, 0x7d, 0xef, 0x80, 0x7c, 0x03, 0xe0, 0x3e, 0x01, 0xf8, 0x07,
    0xfe, 0x3f, 0x3e, 0x00, 0x3f, 0x00, 0x79, 0xc7, 0x00, 0x78, 0x03, 0xc0, 0x1c, 0x01, 0xf0, 0x07,
    0xe0, 0x06, 0x3c, 0x00, 0x1e, 0x00, 0x71, 0x87, 0x00, 0x70, 0x03, 0x80, 0x18, 0x01, 0xe0, 0x07,
    0xe0, 0x06, 0x3c, 0x00, 0x1e, 0x3c, 0x71, 0x87, 0x3c, 0x71, 0xe3, 0x8f, 0x18, 0xf1, 0xe3, 0xc7,
    0xf0, 0x02, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x0f, 0x3c, 0x71, 0xe3, 0x8f, 0x18, 0xf1, 0xe3, 0xc7,
    0xfc, 0x02, 0x38, 0xe3, 0x8e, 0x3c, 0xf0, 0x1f, 0x3c, 0xf1, 0xe7, 0x8f, 0x18, 0xf3, 0xe3, 0xc7,
    0xfe, 0x32, 0x38, 0xe3, 0x8e, 0x3d, 0xf0, 0x3f, 0x3d, 0xf1, 0xef, 0x8f, 0x18, 0xf7, 0xe3, 0xc7,
    0xfe, 0x32, 0x38, 0xe3, 0x8e, 0x3d, 0xf0, 0x3f, 0x3d, 0xf1, 0xef, 0x8f, 0x18, 0xf7, 0xe3, 0xc7,
    0xfe, 0x3a, 0x38, 0xe3, 0x8e, 0x3f, 0xf0, 0x3f, 0x3f, 0xf1, 0xff, 0x8f, 0x18, 0xff, 0xe3, 0xc7,
    0xfe, 0x3e, 0x38, 0xe3, 0x8c, 0x07, 0xe0, 0x7e, 0x07, 0xe0, 0x3f, 0x8f, 0x10, 0x1f, 0xc0, 0x0f,
    0xfe, 0x3e, 0x38, 0xe3, 0x88, 0x07, 0xc0, 0x7c, 0x07, 0xc0, 0x3e, 0x00, 0x30, 0x1f, 0x80, 0x1f,
    0xfe, 0x3e, 0x38, 0xe3, 0x88, 0x07, 0xc0, 0x7c, 0x07, 0xc0, 0x3e, 0x00, 0x30, 0x1f, 0x80, 0x1f,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3f, 0xf0, 0x3f, 0x3f, 0xf1, 0xff, 0x00, 0x78, 0xff, 0xe3, 0xff,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3d, 0xf0, 0x3f, 0x3d, 0xf1, 0xef, 0x8f, 0xf8, 0xf7, 0x80, 0x07,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0xf0, 0x1f, 0x3c, 0xf1, 0xe7, 0x8f, 0xf8, 0xf3, 0xc0, 0x07,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x0f, 0x3c, 0x71, 0xe3, 0x8f, 0xf8, 0xf1, 0xe3, 0xc7,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x0f, 0x3c, 0x71, 0xe3, 0x8f, 0xf8, 0xf1, 0xe3, 0xc7,
    0xfe, 0x3e, 0x38, 0xe3, 0x8e, 0x3c, 0x71, 0x87, 0x3c, 0x71, 0xe3, 0x8f, 0xf8, 0xf1, 0xe3, 0xc7,
    0xfe, 0x0e, 0x7c, 0xe3, 0x9e, 0x00, 0x71, 0xc7, 0x00, 0x70, 0x03, 0x83, 0xf8, 0x01, 0xe3, 0xc7,
    0xfc, 0x1e, 0xfe, 0xe3, 0xbe, 0x00, 0x71, 0xef, 0x00, 0x70, 0x03, 0x07, 0xf8, 0x01, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

const uint8_t BUTTON_PINS[] = {25, 26, 27, 14};
const int NUM_BUTTONS = 4;

bool buttonStates[NUM_BUTTONS] = {false};
bool lastButtonStates[NUM_BUTTONS] = {false};
unsigned long lastDebounceTime[NUM_BUTTONS] = {0};
unsigned long debounceDelay = 50;

unsigned long buttonPressStartTime[NUM_BUTTONS] = {0};
bool buttonWasPressed[NUM_BUTTONS] = {false};

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
TimeTracker timeTracker;
Menu menu(&display);
Config config;

WiFiServer server(80);
String header;

void drawCentreString(const char *buf, int x, int y);

void setup()
{
  Serial.begin(115200);

  for (int i = 0; i < NUM_BUTTONS; i++)
  {
    pinMode(BUTTON_PINS[i], INPUT_PULLUP);
  }

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  display.clearDisplay();
  display.display();

  display.drawBitmap(0, 0, epd_bitmap_Untitled, 128, 32, SSD1306_WHITE);

  display.setTextColor(SSD1306_WHITE);
  display.cp437(true);

  display.setTextSize(2);
  display.setCursor(0, 34);
  display.print("by Lachlan");

  display.setTextSize(1);
  display.setCursor(0, 52);
  display.print("v1.0.0 - 2025");
  display.display();

  delay(5000);

  config.load();

  if (config.hasWiFiCredentials())
  {
    Serial.println("SSID: " + String(config.getSSID()) + ", Password: " + String(config.getPassword()));
    WiFi.begin(config.getSSID(), config.getPassword());
    while (WiFi.status() != WL_CONNECTED)
    {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    server.begin();
  }
}

void checkMenuEntry()
{
  static unsigned long menuEntryTimer = 0;

  if (buttonStates[CONFIRM_BUTTON] && buttonStates[DOWN_BUTTON])
  {
    if (menuEntryTimer == 0)
    {
      menuEntryTimer = millis();
    }
    else if (millis() - menuEntryTimer > 3000)
    {
      menu.enter();
      menuEntryTimer = 0;
    }
  }
  else
  {
    menuEntryTimer = 0;
  }
}

void handleButtons()
{
  for (int i = 0; i < NUM_BUTTONS; i++)
  {
    int reading = !digitalRead(BUTTON_PINS[i]);

    if (reading != lastButtonStates[i])
    {
      lastDebounceTime[i] = millis();
    }

    if ((millis() - lastDebounceTime[i]) > debounceDelay)
    {
      if (reading != buttonStates[i])
      {
        buttonStates[i] = reading;

        Serial.print("Button ");
        Serial.print(i);
        Serial.print(" changed to: ");
        Serial.println(buttonStates[i] ? "PRESSED" : "RELEASED");

        if (buttonStates[i])
        {
          Serial.println("Sending button press event");

          if (menu.isActive())
            menu.handleButton(i, true);
        }
        else
        {
          Serial.println("Sending button release event");
          if (menu.isActive())
          {
            menu.handleButton(-1, false);
          }
          else
          {
            timeTracker.handleButton(i);
          }
        }
      }
    }
    lastButtonStates[i] = reading;
  }
}

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void loop()
{

  // TODO: ALL HACKED IN FROM EXAMPLE - TO BE CLEANED FOR REAL USAGE
  WiFiClient client = server.available();

  if (client)
  {
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client."); // print a message out in the serial port
    String currentLine = "";       // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime)
    { // loop while the client's connected
      currentTime = millis();
      if (client.available())
      {                         // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c);        // print it out the serial monitor
        header += c;
        if (c == '\n')
          if (currentLine.length() == 0)
          {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");

            client.println("<body><h1>Current Times</h1>");
            client.println("<ul>");
            for (int i = 0; i < 4; i++)
            {
              client.println("<li>" + timeTracker.getActivityString(i) + "</li>");
            }

            client.println("</ul>");
            client.println("</body></html>");

            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          }
          else
          { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        else if (c != '\r')
        {                   // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }

  handleButtons();

  if (!menu.isActive())
  {
    checkMenuEntry();
    timeTracker.update();
    timeTracker.display(&display);
  }
  else
  {
    menu.update();
    menu.displayMenu();
  }

  delay(10);
}